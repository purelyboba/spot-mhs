{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome!","text":"<p>Between the 2022-23 and 2023-24 school years, students at Millburn High School were given the opportunity to work hands on with the Spot robot dog, courtesy of Boston Dynamics. This website serves as a documentation of our journey with Spot, and what we were able to do with this incredible robot. </p> <p>Included within this documentation is an educational curriculum to simplify the process of setting up and using Spot. We have modified the Spot SDK documentation and Spot support pages with our own comments and additions, in an effort to make Spot as easy to use as possible. We aim for this documentation to be the only reference you need to get started with Spot.</p> <p>Also included in this documentation is our OpenPayload project, which offers an open source modular payload system to expand the functionality of the Spot robot. We include all the CAD files for this project, as well as an example use case of the system.</p> Spot in our makerspace"},{"location":"coding-spot/arm-manipulation/","title":"Arm Manipulation","text":""},{"location":"coding-spot/arm-manipulation/#basic-concepts","title":"Basic Concepts","text":"<p>Before we dive in to any real code, let's go over some basic methods that you should be familiar with.</p> <p>We still use the basic idea of first generating a RobotCommand and then executing the command with <code>command_client.robot_command</code>.</p> <p>This section will be focused on controlling Spot's arm and claw attachment with code.</p>"},{"location":"coding-spot/arm-manipulation/#stowunstow","title":"Stow/Unstow","text":"<p>Let's learn how to stow and unstow the arm. The code is simple:</p> <pre><code>unstow = RobotCommandBuilder.arm_ready_command()\nunstow_command_id = command_client.robot_command(unstow)\nblock_until_arm_arrives(command_client, unstow_command_id, 3.0)\n</code></pre> <p>We create a RobotCommand with the <code>arm_ready_command()</code> called unstow.</p> <p>Notice that we also create a variable called <code>unstow_command_id</code> when running robot_command(). Not only does this execute the RobotCommand, it also assigns <code>unstow_command_id</code> to the the ID value of the robot_command. We can use the ID value to track the progress of the robot_command in question.</p> <p>This is shown in the third line where we use a <code>block_until_arm_arrives</code> function to block (or stop) all other functions until the <code>unstow</code> RobotCommand is FULLY complete. This prevents any other actions from interfering with the movement of the arm. It is important to consider blocking when you have more complex code that requires the management of multiple parts of Spot.</p> <p>The \"3.0\" in the <code>block_until_arm_arrives</code> refers the maximum amount of time that the code will block for. This means that if more than 3 seconds has passed AND the arm has NOT finished its movement, the code will move on from the unstow movement anyways. This prevents a deadlock situation where Spot is stuck on one movement forever.</p>"},{"location":"coding-spot/arm-manipulation/#arm-manipulation-controlling-the-joints","title":"Arm  Manipulation - Controlling the Joints","text":"<p>The first method of controlling the arm is to control the individual values of the 6 joints on the arm. Because each joint can be thought of as a circular range where the motor can spin to, we can control each joint with <code>radians</code>. </p> A diagram of the joints on Spot. Note that even though there are only 3 locations shown, there are actually 6 different joints. At each location (marked with a red box), there are actually TWO joints - One joint for rotating CW/CCW and another for rotating up/down. <pre><code>def make_robot_command(arm_joint_traj)\n    # convert joint points to an actual movement command to send to Spot\n    joint_move_command = arm_command_pb2.ArmJointMoveCommand.Request(trajectory=arm_joint_traj)\n\n    # create an ArmCommand object with our movement command\n    arm_command = arm_command_pb2.ArmCommand.Request(arm_joint_move_command=joint_move_command)\n\n    # make sure our arm movement is synchronized (like all of our other movements) \n    sync_arm = synchronized_command_pb2.SynchronizedCommand.Request(arm_command=arm_command)\n\n    # convert to a general RobotCommand\n    arm_sync_robot_cmd = robot_command_pb2.RobotCommand(synchronized_command=sync_arm)\n\n    # build the final command\n    return RobotCommandBuilder.build_synchro_command(arm_sync_robot_cmd)\n\nwhile True:\n    # get inputs\n    sh0 = float(input(\"sh\u263a &gt;&gt; \")) sh1 = float(input(\"sh1 &gt;&gt; \"))\n    elo = float(input(\"elo &gt;&gt; \"))\n    el1 = float(input(\"el1 &gt;&gt; \"))\n    wro = float(input(\"wr\u263a &gt;&gt; \"))\n    wr1 = float(input(\"wr1 &gt;&gt; \"))\n    mv = float(input(\"max velocity &gt;&gt; \"))\n    ma = float(input(\"max acceleration &gt;&gt; \"))\n\n    # convert mv/ma inputs into a specific DoubleValue type that Spot can understand \n    max_vel = wrappers_pb2. DoubleValue(value=mv)\n    max_acc = wrappers_pb2.DoubleValue(value=ma)\n\n    # convert to a specific movement trajectory and a specific point in 3D space \n    traj_point = RobotCommandBuilder.create_arm_joint_trajectory_point(sho, sh1, elo, el1, wro, wr1)\n\n    # set up the trajectory, set maximum velocity and acceleration \n    arm_joint_traj = arm_command_pb2.ArmJointTrajectory(points=[traj_point], maximum velocity=max_vel, maximum_acceleration=max_acc)\n\n    command = make_robot_command(arm_joint_traj) # build the ArmCommand \n    cmd_id = command_client.robot_command(command) # execute ArmCommand \n    time.sleep(0.5)\n</code></pre> <p>The code above is a mouthful, so let's go over it in detail.</p> <p>We need to write a helper function first called <code>make_robot_command</code>, which will centralize all of the necessary commands needed to set up a joint movement. We will use the <code>make_robot_command</code> function every time we want to make a new movement. The <code>make_robot_command</code> function will convert a simple set of points into a single movement through 3D space.</p> <p>We can then  run our inputs in an infinite loop so that Spot will constantly be updating  its position to the newest input.</p> <p>We can then get inputs for each joint movement. The guide below will explain what each input variable means:</p> <p>\"sh-\" = movement of shoulder joint</p> <p>\"el-\" = movement of elbow joint</p> <p>\"wr-\" = movement of wrist joint</p> <p>sh0 = shoulder left/right</p> <p>sh1 = shoulder up/down</p> <p>el0 = elbow up/downn</p> <p>el1 = elbow rotation clockwise (CW) or counterclockwise (CCW)</p> <p>wr0 = wrist up/down</p> <p>wr1 = wrist CW/CCW</p> <p>Remember, the input values are  in radians. Feel free to add in code to convert between radians and degrees if you feel more comfortable inputting degrees instead.</p>"},{"location":"coding-spot/arm-manipulation/#claw-opening-and-closing","title":"Claw - Opening and closing","text":"<p>Basic code for opening and closing the claw. We've seen the RobotCommand +  command_client.robot_command usage many times before in movement, so this should be pretty  understandable. We create RobotCommands for both  the opening and closing of the claw and execute the RobotCommand just to open the claw. If you want to close the claw, change the <code>robot_command(open_claw)</code> to <code>robot_command(close_claw)</code>.</p> <pre><code>open_claw = RobotCommandBuilder.claw_gripper_open_command()\nclose_claw = RobotCommandBuilder.claw_gripper_close_command()\nopen_id = command_client.robot_command(open_claw)\n</code></pre>"},{"location":"coding-spot/arm-manipulation/#claw-types-of-grasping","title":"Claw - Types of grasping","text":"<p>There are different ways Spot can pick up an object:</p> <ol> <li> <p>Top-down: Spot will try to grab with the claw perpendicular to the ground (grab the object by the top)</p> </li> <li> <p>Horizontal: Spot will try to grab with the claw parallel to the ground (grab the object by the side)</p> </li> <li> <p>45-Angle: Spot will try to approach the object at a 45 degree angle</p> </li> <li> <p>Force Squeeze: Spot will disregard any approach angle and just close the  claw at the exact point that the user set.</p> </li> </ol>"},{"location":"coding-spot/arm-manipulation/#picking-objects-up","title":"Picking objects up","text":"<p>In this section, you will learn how to pick and object up with built-in commands and functions from the Spot SDK. Go your <code>./spot-sdk/python/examples/arm_grasp</code> folder. Take a look at the <code>arm_grasp.py</code> file. This file will do a few things</p> <ol> <li> <p>Get a stationary image from Spot's front left camera</p> </li> <li> <p>Open a GUI window to allow you to manually click on the object you want Spot to pick up</p> </li> <li> <p>Spot will automatically detect the object and pick it up.</p> </li> </ol> <p>This code is relatively complex, so we will just look at the arm movement for  now (and ignore the camera/image processing).</p> <pre><code># find the object that the user selected so that Spot will know where to grasp \ngrasp = manipulation_api_pb2.PickObjectInImage(\n    pixel_xy=pick_vec, \n    transforms_snapshot_for_camera=image.shot.transforms_snapshot,\n    frame_name_image_sensor=image.shot.frame_name_image_sensor,\n    camera_model=image.source.pinhole)\n\n# set a type of grasping (see above)\nadd_grasp_constraint(config, grasp, robot_state_client)\n\n# use the ManipulationApiRequest to request Spot to run the pickup command \ngrasp_request = manipulation_api_pb2.ManipulationApiRequest(pick_object_in_image=grasp)\n\n# send the request\ncmd_response = manipulation_api_client.manipulation_api_command(\n    manipulation_api_request=grasp_request)\n\n# get feedback from Spot (whether or not the grasp succeeded)\nwhile True: # have this in a loop so that Spot will continuously try to grasp the object \n    feedback_request = manipulation_api_pb2. ManipulationApiFeedbackRequest( manipulation_cmd_id=cmd_response.manipulation_cmd_id)\n\n    # send the request\n    response = manipulation_api_client.manipulation_api_feedback_command(\n        manipulation_api_feedback_request=feedback_request)\n    print(\n        f'Current state: {manipulation_api_pb2. ManipulationFeedbackState.Name (response.current_state)}')\n\n    if response.current_state == manipulation_api_pb2.MANIP_STATE_GRASP_SUCCEEDED or response.current_state == manipulation_api_pb2.MANIP_STATE_GRASP_FAILED:\n        break\n\n    time.sleep(0.25)\n</code></pre>"},{"location":"coding-spot/arm-manipulation/#project-throwing-an-object","title":"Project - Throwing an object","text":"<p>Because the pickup sequence is already pre-written, just edit the arm_grasp.py file. You should edit right below the line that says robot.logger.info('Finished grasp.')</p> <p>Our throwing sequence should look like this:</p> <ol> <li> <p>Begin moving the arm from the ground --&gt; to the sky (underhand toss)</p> </li> <li> <p>As the arm is moving up, open the claw while continuing the arm movement (this requires a tool called \"async\",  we will learn about that)</p> </li> </ol>"},{"location":"coding-spot/arm-manipulation/#what-is-async","title":"What is async?","text":"<p>Asynchronous (async) programming allows you to write concurrent code that can efficiently handle multiple tasks without blocking the execution of the program. This is particularly useful for tasks that involve multitasking (doing two actions at the same time). We need to asynchronously open the claw WHILE the arm is still moving upwards to carry the momentum of the arm into the throw.</p> <p>Now, let's take a look at the code:</p> <pre><code>robot.logger.info('Finished grasp.')\n# throwing code starts below:\n\n# set up joint movements\nsh0 = 0\nsh1 = -0.6\nelo = -0.5\nel1 = 0\nwr0= -0.3\nwr1 = 0\nmax_vel = wrappers_pb2.DoubleValue(value=8)\nmax_acc = wrappers_pb2. DoubleValue(value=10)\n\ntraj_point = RobotCommandBuilder.create_arm_joint_trajectory_point(sh0, sh1, elo, el1, wro, wr1)\n\narm_joint_traj = arm_command_pb2.ArmJointTrajectory(\n    points=[traj_point],\n    maximum_velocity=max_vel, \n    maximum_acceleration=max_acc\n)\n\n# Make a RobotCommand\ncommand = make_robot_command(arm_joint_traj)\nopen = RobotCommandBuilder.claw_gripper_open_command()\n# Send the request\ncmd_id = command_client.robot_command_async(command)\n\n# set the start time at which the arm starts moving upwards \nstart_time = time.time()\nend_time = start_time + 2.0 # set arbitrary end time\nx = 0 # create tick counter\n\nwhile time.time() &lt; end_time: # while the current time is less than the end time\n    if x == 3: # if the current tick hits 3 (which is 0.15 seconds after arm starts moving up) \n        o_i = command_client.robot_command_async(open) # open claw asynchronously\n    time.sleep(0.05) # every \"tick\" is 0.05 seconds\n    x += 1 # increase tick counter\n\ntime.sleep(1)\n</code></pre> <p>We define a \"tick\" as 0.05 seconds. Each tick, we check if we have reached the correct time to release the claw. We should release the claw at 0.15 seconds after the arm first begins moving up.</p> <p>We  can use the <code>robot_command_async</code> instead of <code>robot_command</code> to set up an asynchronous command (one that can run in parallel with another command).</p>"},{"location":"coding-spot/arm-manipulation/#exercise-follow-fiducial-and-throw-object","title":"Exercise: Follow fiducial AND throw object","text":"<p>Try to combine the fiducial_follow and arm_grasp/throw functions into one. Your code should do the following:</p> <ol> <li> <p>Spot picks up object</p> </li> <li> <p>Spot sees human in the room holding a fiducial</p> </li> <li> <p>Spot turns and moves towards human while carrying object</p> </li> <li> <p>Spot stops in front of human and tosses object at human</p> </li> </ol>"},{"location":"coding-spot/coding-spot/","title":"Coding Spot","text":"Objective <p>Learn how to control Spot using code, including AprilTag detection and arm manipulation.</p> Prequisites <p>Have completed the basics of controlling Spot with a controller. Have a computer to program on, preferably a UNIX computer (Mac OS/Linux).</p>"},{"location":"coding-spot/coding-spot/#introduction","title":"Introduction","text":"<p>Now that you have learned how to control Spot using a controller, we will move on to more complex tasks by coding Spot using the Python programming language. First, we will get our computers set up with the Spot SDK, and then we will move into basic movement. From there, we will go into more complicated topics, such as fiducial (AprilTag) detection and arm manipulation.</p>"},{"location":"coding-spot/spot-coding-basics/","title":"Spot Coding Basics","text":"Objective <p>You will be introduced to some basic concepts that may be useful when coding more complex programs with Spot.</p> <p>If you haven't already, please follow the setup instructions for the Spot SDK (Software Development Kit) here. This page will go over some of the most important parts of Spot setup. The SDK will allow you to communicate with Spot with custom code.</p>"},{"location":"coding-spot/spot-coding-basics/#connecting-to-spot","title":"Connecting to spot","text":"<p>Spot emits its own WiFi signal, which can be connected to from your computer.</p> <p>Once you are connected with WiFi, you can run the following command in your terminal to confirm the connection:</p> <pre><code>python3 -m bosdyn.client 192.168.80.3 id\n</code></pre> <p>This command will get the ID of Spot. If Spot is connected, it should provide information about the Spot ID and Software version.</p>"},{"location":"coding-spot/spot-coding-basics/#using-git","title":"Using Git","text":"<p>Git is a useful tool for code management and keeping track of changes you add to your code. This is formally known as a version control system (VCS).</p> <p>You will be using Git to download the software development kit (SDK ) for Spot. The SDK repository is here.</p> <p>You can learn about Git here.</p> <p>You can learn about GitHub here.</p>"},{"location":"coding-spot/spot-coding-basics/#using-the-sdk","title":"Using the SDK","text":"<p>Once you have Git set up and the SDK cloned, most of your coding will be in the <code>./python/examples</code> folder. This is where pre-written examples of the SDK are for you to learn from.</p>"},{"location":"coding-spot/spot-coding-basics/#e-stop","title":"E-Stop","text":"<p>\"E-Stop\" refers to an \"Emergency Stop\" service that is constantly being run in the background of your code. Your code will not run without an E-Stop. </p> <p>The Emergency Stop system is designed to rapidly shut down the robot's motors and other critical functions to prevent harm to humans or damage to the robot. It can be triggered manually by a human operator in emergencies or can be activated automatically by various safety sensors or software conditions.</p> <p>You will be able to run a GUI (or text-based) version of the E-Stop that you can manually use through your code.</p> <p>Setup and verification of estop: <pre><code># Verify that Spot is NOT estopped and has an estop client configured\nassert not robot.is_estopped(), 'Robot is estopped, Please use an external E-Stop client, ' \\ \n'such as the estop SDK example, to configure E-Stop.'\n</code></pre></p> <p>Implementation of estop control: <pre><code>def stop(self): # stop Spot\n    self.estop_keep_alive.stop()\ndef allow(self): # remove the stop and allow Spot to move again\n    self.estop_keep_alive.allow()\ndef settle_then_cut(self): # Spot will attempt to sit down first before cutting motor power\n    self.estop_keep_alive.settle_then_cut()\n</code></pre></p>"},{"location":"coding-spot/spot-coding-basics/#lease","title":"Lease","text":"<p>A \"lease\"  is used to manage and allocate resources among multiple controllers or software components that may need to interact with the robot simultaneously while avoiding conflicts and ensuring safe and coordinated operation.</p> <p>There can only be one lease owner at any time. The owner of the lease is able to give the robot instructions, however an application can delegate the lease to other systems to perform various tasks. In most basic situations, only one program will have the lease for the entire duration of the mission.</p> <pre><code>lease_client = robot.ensure_client(bosdyn.client.lease.LeaseClient.default_service_name)\n    with bosdyn.client.lease.LeaseKeepAlive(lease_client, must_acquire=True, return_at_exit=True):\n        # all robot commands go here\n</code></pre>"},{"location":"coding-spot/spot-coding-basics/#basic-code-format","title":"Basic code format","text":"<p>The basic format of the code is simple. The following components are needed to start a \"template\" python file to build off of when coding Spot:</p> <ul> <li> <p>import commands to import all necessary packages for controlling Spot</p> <pre><code>import argparse\nimport os\nimport sys\nimport time\nimport bosdyn.client\nimport bosdyn.client. lease\nimport bosdyn.client.util\nimport bosdyn.geometry\nfrom bosdyn.api import trajectory_pb2\nfrom bosdyn.api.spot import robot_command_pb2 as spot_command_pb2\n</code></pre> </li> <li> <p>A main function to call any other helper functions and get command line arguments as parameters</p> <pre><code>def main(argv):\n    parser = argparse. ArgumentParser() # Set up parsing system for command-line parameters\n    bosdyn.client.util.add_base_arguments (parser)\n    parser.add_argument( # Add acceptable arguments that can be used with the file\n        '-S', '--save', action='store_true', help= 'Save the image captured by Spot to the working directory. To chose the save location, use --save_path instead. '\n    )\n    options = parser.parse_args(argv)\n    try:\n        hello_spot (options) # If the Python file is run correct, the hello_spot() helper function will run with all the necessary commands\n        return True\n    except Exception as exc:\n        logger = bosdyn.client.util.get_logger()\n        Logger.error('Hello, Spot! threw an exception: %r', exc) # If there is an error with the input/syntax, throw the exception into the logger\n        return False\n</code></pre> </li> <li> <p>An entry point to call the main function</p> <pre><code>if __name__ == '__main__': # This belongs at the END of your python file\n    if not main(sys.argv[1:]):\n        sys.exit(1)\n</code></pre> </li> </ul>"},{"location":"coding-spot/spot-coding-basics/#running-a-file","title":"Running a file","text":"<p>To run a Python file for Spot, use the following command syntax:</p> <pre><code>python3 &lt;file_name&gt; 192.168.80.3\n</code></pre> <p>192.168.80.3 is the local IP address of Spot on its WiFi signal.</p>"},{"location":"coding-spot/spot-vision/","title":"Spot Vision","text":"Objective <p>Utilize the Apriltag library to generate Apriltag images of any size, and then associate the tag with a Spot Mission.</p> <p>AprilTags are a type of visual fiducial system that are used in a wide range of applications, including augmented reality, robotics, and camera calibration. They are essentially visual markers that can be printed on paper and detected by a camera, allowing for precise 3D positioning and identification of objects. They look like QR codes, with each pixel being colored white or black. AprilTags were developed by researchers at the University of Michigan in 2011 and have since been refined to increase their robustness and speed of detection. The AprilTag library is implemented in C with no external dependencies, making it easily portable to embedded devices. There are also implementations available in Java and C++. AprilTags are a popular choice for computer vision applications due to their accuracy and low performance overhead.</p> <p>Apriltags are important for Spot because they allow for precise 3D positioning and identification of objects. Spot recognizes Apriltag fiducials that meet the correct size requirements. Apriltags are used to help the robot know where it is on the field, so it can align itself to some goal position. Apriltags provide a means of identification and 3D positioning, even in low visibility conditions. The tags act like barcodes, storing a small amount of information (tag ID), while also enabling simple and accurate 6D (x, y, z, roll, pitch, yaw) pose estimation of the tag.</p> <p>Spot has a basic prerequisites for AprilTags:</p> <ul> <li>Must be in the Tag36h11 set</li> <li>AprilTags are separated into \"sets,\" which are collections of AprilTags with similar sizes and properties</li> </ul>"},{"location":"coding-spot/spot-vision/#upscaling-the-fiducials","title":"Upscaling the fiducials","text":"<p>Why upscale? The images that have been downloaded are just 10 pixels by 10 pixels, which looks very blurry and small. We can use code to upscale (or increase the size of) the fiducials so that they can be clearly printed</p> <ol> <li>Download an example Apriltag here (the download button is in the top right).</li> <li>Copy this Python code into your IDE (save the file as <code>upscale.py</code>)     <pre><code>from PIL import Image\n\n# Load the original PNG image\noriginal_image = Image.open('./tag36_11_00000.png')\n\n# Define the desired upscale factor\nupscale_factor = 100 # Replace with the desired value\n\n# Calculate the new width and height\nnew_width = original_image.width * upscale_factor\nnew_height = original_image.height * upscale_factor\n\n# Perform the upscale using the 'NEAREST' resampling method for a lossless result\nupscaled_image = original_image.resize((new_width, new_height), resample=Image.NEAREST)\n\n# Save the upscaled image as a new PNG file\nupscaled_image.save('upscaled_image.png')\n</code></pre></li> </ol> Note <p>Make sure your download AprilTag is in the same folder as your Python code.</p> <ul> <li> <p>Line 1: This is an import command. \"PIL\" is a Python package. It is a set of prewritten code that someone else has written. The PIL package contains prewritten code for image processing, so we won't have to write the complex functions again. More specifically, we import the Image class from the PIL package. This gives us access to all the functions related to the Image class.</p> </li> <li> <p>Line 4: We use the .open() function from the Image class in order to load the original image into a variable. The text inside the quotation marks is called a filepath. The \"./\" tells the computer that the file is located in the same folder that the code is in.</p> </li> <li> <p>Line 7: This is constant that the computer will use to upscale the image by. We have it set to 100 but feel free to play around with the value.</p> </li> <li> <p>Line 10 + 11: After loading the file into the variable in Line 4, we can get the <code>.width</code> and <code>.height</code> attributes from the image. As you would expect, we are given the original image's width and height. We then multiply the original dimensions by the upscaling factor. For example, the original image is 10 pixels by 10 pixels. However, the upscaled image will be 1000 pixels by 1000 pixels</p> </li> <li> <p>Line 14: We resize the original image with the \"nearest neighbor\" resizing algorithm shown below:</p> <p> </p> </li> <li> <p>This algorithm is very simple and efficient. It will just fill the nearest neighboring pixels with the same color as the originally chosen pixel. Because AprilTags are very simple images, such a simple algorithm is sufficient.</p> </li> <li> <p>Line 17: Finally, we save the upscaled image as \"upscaled_image.png\"</p> </li> </ul> <p>Open the downloaded tag. You should see that the tag is very small (it should be just a few pixels wide/tall).</p> <p>Run the python code. Open the file called \"upscaled_image.png\". You should see that your new image is much larger and is easier to recognize.</p> <p>Congratulations! You have just upscaled and formatted your own Apriltag!</p>"},{"location":"coding-spot/spot-vision/#testing","title":"Testing","text":"<p>To test that your new Apriltag works, print out <code>upscaled_image.png.</code></p> <p>Go into your spot-sdk directory and go to <code>python/examples/fiducial_follow.</code> Follow the instructions to get the example running on Spot.</p> <p>Once the code is running, stand in front of Spot with your printed and upscaled Apriltag. Spot will follow your position and orient itself in front of you.</p>"},{"location":"coding-spot/spot-vision/#using-the-fiducial","title":"Using the fiducial","text":"<p>In the same python examples folder where <code>hello_spot.py</code> is, there is another example file called       <code>fiducial_follow.py</code> in the <code>fiducial_follow</code> folder. <code>fiducial_follow.py</code> can teach us a lot about autonomous Spot movement and using code to help Spot recognize fiducials.</p>"},{"location":"coding-spot/startup-and-movement/","title":"Startup and Movement","text":"Objective <p>You will be able to use code to power on and move Spot.</p>"},{"location":"coding-spot/startup-and-movement/#introduction-to-radians","title":"Introduction to Radians","text":"<p>Radians are used an alternative to degrees to measure distance around a circle. Instead of being from a range of 0-360, radians describe the angle using a fraction of 2pi.</p> <p>Please learn about radians with the links below:</p> <ul> <li>Simple Wikipedia</li> <li>MathIsFun</li> </ul>"},{"location":"coding-spot/startup-and-movement/#setting-up-the-estop","title":"Setting up the Estop","text":"<p>Before running any actions on Spot, you need to turn on the estop so that you can cut power to the motors manually if something goes wrong. To run the estop, you can use the pre-written estop client in the SDK. Go to <code>./spot-sdk/python/examples/estop</code> in the <code>spot-sdk</code> folder that you cloned from GitHub. You can choose to run either the gui or the nogui version - the functionality is the same. If the gui version doesn't work (because you are missing graphical dependencies), you can run the nogui version.</p> Image of the nogui (terminal-based) estop UI"},{"location":"coding-spot/startup-and-movement/#powering-up-and-connecting-to-spot","title":"Powering Up and Connecting to Spot","text":"<p>Create a new Python file called <code>hello_spot.py</code>.</p> <p>First, we need to import a few necessary libraries: <pre><code>from __future__ import print_function\n\nimport argparse\nimport os\nimport sys\nimport time\nimport math\nimport random\n\nimport bosdyn.client\nimport bosdyn.client.lease\nimport bosdyn.client.util\nimport bosdyn.geometry\nfrom bosdyn.client.image import ImageClient\nfrom bosdyn.api import arm_command_pb2, geometry_pb2\nfrom bosdyn.client import math_helpers\nfrom bosdyn.client.frame_helpers import GRAV_ALIGNED_BODY_FRAME_NAME, ODOM_FRAME_NAME, get_a_tform_b\nfrom bosdyn.client.robot_command import (RobotCommandBuilder, RobotCommandClient,\n                                         block_until_arm_arrives, blocking_stand)\nfrom bosdyn.client.robot_state import RobotStateClient\n</code></pre> We import some generic python libraries, as well as a host of functions from the bosdyn.client, which give us the ability to access the robot and control its subsystems (movement, arm, claw).</p> <p>Next, we will write some setup code to allow us to connect to Spot: <pre><code>def main(argv):\n    \"\"\"Command line interface.\"\"\"\n    parser = argparse.ArgumentParser()\n    bosdyn.client.util.add_base_arguments(parser)\n    options = parser.parse_args(argv)\n    try:\n        hello_spot(options) # We will write the hello_spot() function later to actually give Spot functionality\n        return True\n    except Exception as exc:\n        logger = bosdyn.client.util.get_logger()\n        logger.error(\"Hello, Spot! threw an exception: %r\", exc)\n        return False\n\n\nif __name__ == '__main__':\n    if not main(sys.argv[1:]):\n        sys.exit(1)\n</code></pre> The above code serves the purpose of nesting the <code>hello_spot()</code> function in a try-catch loop, to make sure that our program catches any unforeseen errors and handles them accordingly. </p> <p>Now, let's get right into the heart of our program. Right below the imports, define a new function called <code>hello_spot().</code> At the start of this function, we will setup logging (to keep a constant stream of telemetry), create an instance of the SDK (which will be our client to access commands, and create an instance of the robot (which we will pass commands to). We will also authenticate our client so that Spot recognizes our commands and follows them.</p> <p><pre><code>def hello_spot(config):\n    \"\"\"A simple example of using the Boston Dynamics API to command a Spot robot.\"\"\"\n\n    # The Boston Dynamics Python library uses Python's logging module to\n    # generate output. Applications using the library can specify how\n    # the logging information should be output.\n    bosdyn.client.util.setup_logging(config.verbose)\n\n    # The SDK object is the primary entry point to the Boston Dynamics API.\n    # create_standard_sdk will initialize an SDK object with typical default\n    # parameters. The argument passed in is a string identifying the client.\n    sdk = bosdyn.client.create_standard_sdk('HelloSpotClient')\n\n    # A Robot object represents a single robot. Clients using the Boston\n    # Dynamics API can manage multiple robots, but this tutorial limits\n    # access to just one. The network address of the robot needs to be\n    # specified to reach it. This can be done with a DNS name\n    # (e.g. spot.intranet.example.com) or an IP literal (e.g. 10.0.63.1)\n    robot = sdk.create_robot(config.hostname)\n\n    # Clients need to authenticate to a robot before being able to use it.\n    bosdyn.client.util.authenticate(robot)\n\n    # Establish time sync with the robot. This kicks off a background thread to establish time sync.\n    # Time sync is required to issue commands to the robot. After starting time sync thread, block\n    # until sync is established.\n    robot.time_sync.wait_for_sync()\n\n    # Verify the robot is not estopped and that an external application has registered and holds\n    # an estop endpoint.\n    assert not robot.is_estopped(), \"Robot is estopped. Please use an external E-Stop client, \" \\\n                                    \"such as the estop SDK example, to configure E-Stop.\"\n</code></pre> With all that setup out of the way, let's establish a lease and power on the robot. As mentioned in an earlier section, the lease is needed to establish our client as the current sole controller of the robot. </p> <p><pre><code>    # ... see previous code block\n\n    # Establish the lease\n    lease_client = robot.ensure_client(bosdyn.client.lease.LeaseClient.default_service_name)\n    with bosdyn.client.lease.LeaseKeepAlive(lease_client, must_acquire=True, return_at_exit=True):\n        # Now, we are ready to power on the robot. This call will block until the power\n        # is on. Commands would fail if this did not happen. We can also check that the robot is\n        # powered at any point.\n        robot.logger.info(\"Powering on robot... This may take several seconds.\")\n        robot.power_on(timeout_sec=20)\n        assert robot.is_powered_on(), \"Robot power on failed.\"\n        robot.logger.info(\"Robot powered on.\")\n</code></pre> Now, let's take a look some movement commands.</p>"},{"location":"coding-spot/startup-and-movement/#explanation-and-introduction-to-movement-commands","title":"Explanation and Introduction to Movement Commands","text":""},{"location":"coding-spot/startup-and-movement/#synchro_velocity_command","title":"synchro_velocity_command","text":"<p><code>synchro_velocity_command</code> is the basic command for movement. It's used to tell the Spot robot to move around in a 2D plane. When you use this command, you specify how fast you want the robot to move in the X and Y directions and how fast you want it to rotate.</p> <p>Here are the key parameters:</p> <ul> <li> <p><code>v_x</code>: This is how fast you want the robot to move forward or backward. (Note: This is VELOCITY, not DISTANCE. To set a specific distance, you will need to set a specific amount of TIME Spot should move for. You need to use the Distance formula: Distance = Time * Velocity to calculate the time you need to run Spot for. The unit is meters/second)</p> </li> <li> <p><code>v_y</code>: This is how fast you want the robot to move left or right. (The same velocity caveat applies here)</p> </li> <li> <p><code>v_rot</code>: This is how fast you want the robot to rotate. (The same velocity caveat applies here) (The unit for this is radians/second)</p> </li> <li> <p><code>body_height</code>: This is the height of the robot from the ground. If you provide no body height, Spot will move at its default standing height.</p> </li> </ul> <p><code>synchro_velocity_command</code> will return a <code>RobotCommand</code>, which can be plugged into the <code>robot_command</code> service to execute the <code>RobotCommand</code></p> <pre><code>cmd_move = RobotCommandBuilder.synchro_velocity_command(v_x=1, v_y=0, v_rot=0)\n</code></pre>"},{"location":"coding-spot/startup-and-movement/#robot_command","title":"robot_command","text":"<p>This is a service that accepts RobotCommands built by synchro_velocity_command (and other RobotCommand builders). Robot_command will allow you to run the synchro_velocity_command.</p> <p>Here are the key parameters:</p> <ul> <li> <p><code>command</code>: RobotCommand to run</p> </li> <li> <p><code>end_time_secs</code>: Specify the LENGTH OF TIME you want to run the RobotCommand for.</p> </li> </ul> <p>This is where you can use the distance formula to calculate time and velocity. You should already know the distance and velocity you want Spot to move at, so all you need to do is find out the time you need to move by. </p> <p>The distance formula is: Distance = Time * Velocity</p> <p>We can derive it to be: Distance/Velocity = Time.</p> <p>This way, we can figure out the <code>end_time_secs</code> (time) with the given distance and velocity.</p> <p><pre><code>command.client.robot_command(command=cmd_move, end_time_secs=time.time() + move_duration)\n</code></pre> Example usage of command_client - We run the cmd_move RobotCommand for move_duration seconds. Note that we use time.time() because we want to count seconds relative to when this RobotCommand starts being run</p>"},{"location":"coding-spot/startup-and-movement/#movement-using-synchro_velocity_command","title":"Movement using synchro_velocity_command","text":"<p>Now, we can put all this together. We need to combine the <code>synchro_velocity_command</code> and <code>robot_command</code> to move the robot to a set position with a set velocity. We can set our velocity wth <code>synchro_velocity_command</code> and set a specific time with <code>robot_command</code>.  We also need to use our distance formula calculations. The resulting code will look like this:</p> <pre><code>x_distance = float(input(\"Distance to move forward (larger than 0, in meters): \")) # Get input for distance\nx_velocity = float(input(\"Velocity to move at (m/s): \")) # Get input for velocity\ncmd_move = RobotCommandBuilder.synchro_velocity_command(v_x=x_velocity, v_y=0, v_rot=0) # Create RobotCommand with the velocity on the x-axis set to velocity while keeping all the other movement axes at 0\nmove_duration = x_distance/x_velocity\ncommand_client.robot_command(command=cmd_move, end_time_secs=time.time() + move_duration) # Execute the RobotCommand for the calculated duration of time\n</code></pre>"},{"location":"coding-spot/startup-and-movement/#small-quirks-with-synchro_velocity_command","title":"Small quirks with synchro_velocity_command","text":"<p>Think about this question: What if we wanted to move Spot backwards (negative X)? Because velocity is a vector (meaning it carries information about the DIRECTION of movement), we also need to set our velocity as negative if we want to move Spot to a negative coordinate on that axis.</p>"},{"location":"coding-spot/startup-and-movement/#exercise","title":"Exercise","text":"<ol> <li> <p>Modify the above code to move the robot in the y-axis (left/right) instead in the x-axis.</p> </li> <li> <p>Then, put everything together - Allow the user to input an (x, y) coordinate as well as individual X and Y velocities that Spot should follow. Then, write code to move Spot to ANY (x, y) point by first making Spot move left/right, and then forward/backward to satisfy both the X and Y target. You can assume that Spot is always (0, 0), so you will be moving to a relative coordinate.</p> </li> </ol>"},{"location":"coding-spot/startup-and-movement/#yaw-pitch-roll-basics","title":"Yaw, Pitch &amp; Roll - Basics","text":"<p>Understanding what yaw, pitch, and roll are is crucial to understanding the physical movement of Spot's torso/body. Yaw, pitch, and roll help us describe the orientation and angle that Spot is facing at.</p> <p>Observe the diagram below. Yaw, pitch, and roll are mapped to one of each of the rotational axes in 3D place.</p> <p>Yaw is the movement of Spot's head from side to side, as if Spot is looking left and right.</p> <p>Pitch is the movement of Spot's nose moving up and down, as if Spot is nodding its head.</p> <p>Roll is the motion of Spot from one side to the other, as if Spot is rolling from left to right like a log in water.</p> The 3 axes of movement on Spot Movement on the yaw axis Movement on the roll axis Movement on the pitch axis"},{"location":"coding-spot/startup-and-movement/#custom-user-input-yaw-pitch-roll","title":"Custom User Input - Yaw, Pitch &amp; Roll","text":"<p>Now that you understand these basic terms, we can modify <code>hello_spot</code>.py to accept user input for yaw/pitch/roll. This code will allow the user to input three numbers (y, r ,p) to determine the yaw, pitch, and roll of Spot. Then, Spot will  move its body to the user input.</p> <pre><code>while True:\n    y = float(input(\"yaw &gt;&gt;&gt; \")) # Get user inputs\n    r = float(input(\"roll &gt;&gt;&gt; \"))\n    p = float(input(\"pitch &gt;&gt;&gt; \"))\n    footprint_R_body = bosdyn.geometry.EulerZXY(yaw=y, roll=r, pitch=p) # Create an Euler Angle vector for the body of Spot\n    cmd = RobotCommandBuilder.synchro_stand_command(footprint_R_body=footprint_R_body) # Send the updated vector values as a standing command\n    command_client.robot_command(cmd) # Run the command\n    robot.logger.info(\"Robot standing twisted\")\n    time.sleep(1)\n</code></pre>"},{"location":"locomotion-with-controller/arm-and-claw/","title":"Arm and Claw","text":"Objective <p>Learn the basics of operating Spot's arm and claw.</p>"},{"location":"locomotion-with-controller/arm-and-claw/#controller-shortcuts","title":"Controller shortcuts","text":"<p>There are several operational shortcuts built into the controller to facilitate operation of the Spot Arm. A full list of hotkey combinations is listed below, but many of these shortcuts are also visible on the controller by pressing and holding the LB or RB buttons. Additionally, pressing the left or right joystick down will lock these shortcuts to the UI screen. See Spot controller configurations for an overview of potential controller setups and configurations. The shortcuts in the table below refer to the mode buttons on the respective controller.</p>"},{"location":"locomotion-with-controller/arm-and-claw/#manipulation-menu","title":"Manipulation menu","text":"<p>The manipulation menu can be accessed by opening the applications drop-down and selecting MANIPULATION. From the manipulation menu you can instruct Spot to perform grasping behaviors (1), manipulate an object the robot is currently grasping (2), or drive the robot and arm manually (3).</p>"},{"location":"locomotion-with-controller/arm-and-claw/#grasp-behaviors","title":"Grasp behaviors","text":"<ul> <li>Grasp Wizard: Semi-autonomously grasp an object by specifying the approach angle, gripper location, and gripper orientation</li> <li>Pick Up Object: Select an object for Spot to pick up</li> <li>Open Door: Approach and semi-autonomously open a door</li> </ul>"},{"location":"locomotion-with-controller/arm-and-claw/#post-grasp-actions","title":"Post grasp actions","text":"<ul> <li>Carry: Carry an object in the gripper to another location</li> <li>Twist, Turn, Pull: Manipulate objects that are constrained in how they move, such as cabinets, drawers, levers, switches, ball valves and wheels</li> <li>Drag: Drag a grasped object of any size. Particularly useful for objects that may be too heavy to carry</li> <li>Open Grasped Door: If Spot is grasping a door handle, complete the process semi-autonomously</li> </ul>"},{"location":"locomotion-with-controller/arm-and-claw/#drive-behaviors","title":"Drive behaviors","text":"<ul> <li>Robot Camera: Switch the tablet view to use the robot's body cameras</li> <li>Operate Arm: Operate the arm and use the gripper</li> <li>Gripper Camera: Switch the tablet view to use the gripper cam</li> </ul>"},{"location":"locomotion-with-controller/arm-and-claw/#operate-arm","title":"Operate arm","text":"<p>To drive the arm manually: Under Drive Behaviors, select Operate Arm. </p>"},{"location":"locomotion-with-controller/arm-and-claw/#gripper-cam-view-options","title":"Gripper cam view options","text":"<p>Using the gripper cam via the camera dropdown list will provide you with additional controls unique to the gripper view. By either selecting the screen or DEFAULT GAZE you will enter Gaze mode, which allows you to more effectively aim and focus the gripper camera at a target.</p> <ol> <li> <p>Nudges the gripper in small increments</p> <ul> <li>While in Gaze mode, these arrows will adjust the crosshair instead (gaze target)</li> </ul> </li> <li> <p>Rotates the gripper itself in small increments</p> </li> <li> <p>Crosshair: Appears while in Gaze mode. When not gazing, the crosshair is hidden</p> </li> <li> <p>Distance control: Moves gripper closer (+) or further (-) from gaze target</p> </li> <li> <p>FREEZE GAZE: Selecting this switches from gaze control to joint level freeze to make gazing steadier</p> </li> <li> <p>DEFAULT GAZE: Selecting this enters Gaze mode. Selecting the screen itself while in gripper cam view also enters Gaze mode</p> </li> <li> <p>CLEAR TARGET: Removes gaze target and clears the crosshair from the screen</p> </li> </ol>"},{"location":"locomotion-with-controller/arm-and-claw/#deploying-and-stowing-the-arm","title":"Deploying and stowing the arm","text":"<ol> <li>Select MANIPULATION in the application menu</li> <li>Select Operate Arm under Drive Behaviors. The robot will stand. The arm will move to the Stowed position</li> <li>Deploy the arm to the Ready position by selecting the arm in the arm status bar</li> <li> <p>An arm status panel will appear with the option to Stow the arm, or deploy it into the carry or ready position. Select Ready and then close the menu</p> <p> </p> <p> </p> </li> <li> <p>Confirm that the arm status is now Deployed</p> <p> </p> </li> <li> <p>Return the arm to the Stow position by once again selecting the arm in the arm status bar</p> </li> <li> <p>From the menu, select Stow. The arm moves into the predefined Stow position. Close the menu and note that the status of the arm changes to Stowed</p> </li> <li> <p>From the Stowed position, place the arm back into the Ready position by using the Ready hotkey combination</p> </li> <li> <p>Return the arm to the Stowed position using the Stow hotkey combination</p> </li> </ol>"},{"location":"locomotion-with-controller/arm-and-claw/#controlling-the-end-effector","title":"Controlling the end-effector","text":"<p>In Reach mode, joysticks on the tablet drive the end-effector. The body turns and changes height to extend its range, but the robot does not take any steps. In this example, the Operator uses the joystick controls in Reach mode to first explore the range of arm motion around the robot, and then to draw a rectangle with the end effector. </p> <ol> <li> <p>Select Manipulation in the application menu</p> </li> <li> <p>Select Operate Arm under Drive Behaviors. The robot arm will be in the Stow position</p> <p> </p> </li> <li> <p>Deploy the arm into the Ready position using the RB+X hotkey combination. Note that the status of the arm has changed to Deployed</p> </li> <li> <p>Using the right joystick, press in the up direction to move the end effector up until the arm and end effector have stabilized, then in the down direction to lower the end effector until it touches the floor. Note that the body will adjust its height in response</p> <p> </p> </li> <li> <p>Return the arm to the Ready position using the hotkey combination on the tablet</p> </li> <li> <p>From the Ready position, use the left joystick to move the arm forward as far as it will extend. Then use the left joystick to move the arm all the way left. Note that the arm will extend almost 180 degrees and that the robot body twists to facilitate the arm movement but will not step</p> </li> <li> <p>Now use the left joystick to move the arm to the right. Note that the arm will traverse almost 360 degrees.</p> </li> <li> <p>Return the arm to the Ready position using the hotkey combination. If the robot's feet are twisted when the Arm is returned to Ready, select Walk and take a step to reorient the legs</p> </li> <li> <p>With the robot in Reach mode, combine left and right joystick movements</p> </li> </ol>"},{"location":"locomotion-with-controller/controller-layout/","title":"Controller Layout","text":"Objective <p>Learn about the controller layout.</p>"},{"location":"locomotion-with-controller/controller-layout/#spot-tablet","title":"Spot Tablet","text":"<p>Spot Tablet - Samsung Galaxy Tab Active3</p> <p>Spot Tablet Joysticks</p> <p>The Spot Tablet Joysticks are designed to fit around the Samsung Galaxy Tab Active3 pictured above. Note that any case the tablet is in must be removed prior to fitting into the joysticks.</p> <p>Spot Tablet JXD</p>"},{"location":"locomotion-with-controller/controller-layout/#tablet-installation","title":"Tablet installation","text":"<ol> <li> <p>Remove the bezel by pressing into the two pins at the top of the tablet and pull upward on the bezel at the same time.</p> Note <p>For example, a ball point pen or 1.5mm Allen wrench could be used to push the pins in.</p> <p> </p> </li> <li> <p>Place the bottom edge of the Spot Tablet (side with the pogo pins) into the Tablet Joysticks. Rotate the top of the Samsung tablet into the joysticks.</p> <ul> <li>Push the bottom of the bezel into the joysticks.</li> <li>Rotate the top of the bezel down.</li> <li>Snap the tops of the bezel down into the two pins.</li> </ul> </li> </ol>"},{"location":"locomotion-with-controller/controller-layout/#tablet-removal","title":"Tablet removal","text":"<ol> <li> <p>Remove the bezel by pressing an object like a ball point pen or 1.5mm Allen wrench into the ball detent and pull upward on the bezel at the same time</p> </li> <li> <p>Use a tool like a 1.5mm Allen wrench on the rear holes to push the tablet slightly out. </p> </li> </ol>"},{"location":"locomotion-with-controller/controller-layout/#charging","title":"Charging","text":"<ul> <li>Use the USB-C port labeled above.</li> <li>Can be charged at either 10W with a 2A charger or 15W.</li> </ul>"},{"location":"locomotion-with-controller/locomotion-with-controller/","title":"Locomotion with Controller","text":"Objective <p>Learn how to safely operate Spot using a tablet, and have Spot perform basic functions such as posing and walking.</p>"},{"location":"locomotion-with-controller/locomotion-with-controller/#prerequisites","title":"Prerequisites","text":"<p>Possession of a fully functional Spot which as been powered on, as well as a controller to operate it.</p>"},{"location":"locomotion-with-controller/locomotion-with-controller/#introduction","title":"Introduction","text":"<p>Before we jump into programming Spot, we need to learn the basics of how to control Spot's motion to have Spot perform cool tricks. We'll start off simple, with learning the controller layout, and progress to having Spot perform basic activities such as walking.</p>"},{"location":"locomotion-with-controller/operational-safety/","title":"Operational Safety","text":"Objective <p>Prepare a safe environment in which Spot will be operated.</p> <p>Before operating Spot, make sure that your surroundings are safe and clear! If an environment or robot behavior seems unsafe, stop immediately.</p> <p>Review the Spot Instructions for Use for a complete list of safety instructions.</p> Warning <p>Do not touch or operate Spot if any damage is noticed and wet parts of the body are exposed to contact.</p> <p>Contact Boston Dynamics Support in case of apparent damage of parts.</p> Danger <p>Exposure to severe electrical and electromagnetic environments may determine non-apparent damages or latent failures of Spot. </p> <p>Using Spot after exposure to high voltage or indirect contact may result in unexpected failure of the electrical system.</p> Warning <p>Spot may collide with people or objects, even with its obstacle detection system enabled. </p> <p>Operators and bystanders should assume that Spot may move unexpectedly at any time.</p> Tip <p>The Emergency Stop function must be used only when you have full visibility of Spot and its surroundings. </p> <p>A manually activated Emergency Stop will override any active control, and therefore could determine additional hazards if it causes a forced loss of stability</p>"},{"location":"locomotion-with-controller/posing-spot/","title":"Posing Spot","text":"Objective <p>Learn how to pose Spot using a controller.</p>"},{"location":"locomotion-with-controller/posing-spot/#posing-options","title":"Posing options","text":"<p>Use the controller\u2019s joysticks to pose Spot\u2019s body while it is in Stand mode. Its feet should remain still. However, Spot may adjust its feet to maintain balance if necessary.</p>"},{"location":"locomotion-with-controller/posing-spot/#practice-posing-spot","title":"Practice posing Spot","text":"<ul> <li>From the sit position, stand Spot by pressing and holding Stand on the controller or just press the B button</li> <li>From the standing position, pose the robot by manipulating the joystick controls</li> <li>Adjust the height of the robot using the slider on the tablet screen. Note that the posing functionality is maintained regardless of the robot height. Medium height is the most stable for posing</li> </ul>"},{"location":"locomotion-with-controller/self-righting-spot/","title":"Self-Righting Spot","text":"Objective <p>Learn how to self-right Spot using a controller.</p> <p>In normal operation, such as changing the battery, Spot can sometimes end up on its back or on the ground with its legs in an unusual position. During the self-righting maneuver, the robot flips using its legs to turn itself over. Its legs are positioned to be ready to stand.</p> <p>Now that your robot is powered on and on its back, perform a self-right using the following procedure. If Spot is not on its back, roll it over to get a feel for how self-righting works:</p> <ul> <li>Make sure the robot has 2m of clearance all around it</li> <li>Using the controller\u2019s action menu, press and hold Stand or press the B button and then tap Self Right</li> <li>The robot will attempt to roll over by moving its legs</li> <li>The robot will stop moving and then sit</li> </ul> <p>If Spot fails to self-right:</p> <ul> <li>Turn off the robot's motors via the controller app</li> <li>Press the motor lockout button on the robot</li> <li>The robot's limbs will go slack. If Spot is upright or standing, it will fall</li> <li>Manually move legs and body into \u201csit\u201d position</li> <li>Take extra care to avoid hip and knee pinch points</li> <li>Release lockout button</li> <li>Use the controller to turn on motor power, then attempt the self-right maneuver again</li> </ul>"},{"location":"locomotion-with-controller/walking-spot/","title":"Walking Spot","text":"Objective <p>Learn how to make Spot walk using a controller.</p> <p>Spot can walk in most places that a person can. Only walk Spot in a safe operating environment as outlined in this guide.</p>"},{"location":"locomotion-with-controller/walking-spot/#options-for-operation","title":"Options for operation","text":"<p>There are two ways to operate Spot:</p> <ul> <li> <p>Using the joysticks on the Spot tablet controller</p> </li> <li> <p>Using touch-to-go on the controller screen</p> </li> </ul>"},{"location":"locomotion-with-controller/walking-spot/#walking-spot-using-the-controller-joysticks","title":"Walking Spot using the controller joysticks","text":"<ul> <li> <p>On the controller app, select Walk from the action menu or press the A button. If Spot is sitting, it will stand up</p> </li> <li> <p>Use the right joystick to turn Spot. This is easiest when standing a safe distance behind Spot</p> </li> <li> <p>Use the left joystick to move Spot\u2019s body. It can move forward, backward, right, and left</p> </li> <li> <p>To stop movement, release the joysticks</p> </li> </ul>"},{"location":"locomotion-with-controller/walking-spot/#practice-walking-spot","title":"Practice walking Spot","text":"<ul> <li> <p>Put Spot into walking mode by selecting Walk from the tablet menu or pressing the A button</p> </li> <li> <p>Walk Spot in a circle or figure 8 going forward</p> </li> <li> <p>Walk Spot in a circle or figure 8 going backward</p> </li> <li> <p>Turn Spot 360 degrees using the right joystick</p> </li> </ul>"},{"location":"open-payload/open-payload/","title":"OpenPayload","text":"Note <p>OpenPayload is as an open source framework. Use/replication will require modification by the end user.</p>"},{"location":"open-payload/open-payload/#goal","title":"Goal","text":"<p>The goal of this project was to make an affordable and easily customizable payload. Most components are 3D printable, and the payload can be easily attached to Spot.</p>"},{"location":"spot-fundamentals/anatomy-of-spot/","title":"Anatomy of Spot","text":"Objective <p>Get to know the parts and features of Spot, along with its basic operation philosophy and limitations. </p>"},{"location":"spot-fundamentals/anatomy-of-spot/#spot-components","title":"Spot components","text":"<ul> <li> <p>five stereo cameras (two at the front, one at each side, one at the rear)</p> </li> <li> <p>a pair of status light LED strips at the front of the robot</p> </li> <li> <p>two payload mounting rails along the top sides of the body, and two payload ports at the top rear and top middle of the body. Spot is capable of handling Boston Dynamics payloads, or custom homegrown payloads. </p> </li> <li> <p>lifting handles on each of Spot's hips. </p> </li> <li> <p>2 actuators in each hip, and one actuator in each knee. The hip joints are referred to as HX and HY for each plane of rotation. This creates the following degrees of freedom and limits on each axis: 12 DOFs, 3 per leg. </p> </li> </ul>"},{"location":"spot-fundamentals/anatomy-of-spot/#buttons-and-ports","title":"Buttons and ports","text":"<p>Spot's power port and cover are at the back of the robot near the top. Below on the back of the robot are the power button, the motor lockout button, and the ethernet port and cap. Each Spot Battery has a State of Charge (SoC) button which displays the battery charge level as a row of up to five LEDs. </p>"},{"location":"spot-fundamentals/power-management/","title":"Power Management","text":"Warning <p>To reduce risk of electric shock and fire, or damage to Spot or related components: - Only use Boston Dynamics-approved Spot Batteries and Spot Chargers to charge or power the robot or batteries.</p> <ul> <li> <p>Connect the charger to a properly grounded AC outlet. Do not use ground adapters or replace the plug.</p> </li> <li> <p>Do not use the power cables if they are damaged.</p> </li> <li> <p>Do not touch uninsulated parts of the charger's output connector or battery terminals.</p> </li> <li> <p>Do not open or disassemble the charger or battery.</p> </li> <li> <p>Do not short-circuit, burn, disassemble, submerge, puncture, crush, drop, or damage the battery. Contact support@bostondynamics.com with any concerns regarding damaged batteries.</p> </li> <li> <p>If a battery fire starts, do not attempt to put it out. Evacuate to a safe area and call the fire department. Battery fires create toxic fumes and cannot be put out with conventional fire extinguishers or water.</p> </li> <li> <p>Spot operators should develop a battery storage and charging safety policy consistent with industry standards and local regulations.</p> </li> <li> <p>Always remove the battery from robot during transportation or storage.</p> </li> </ul>"},{"location":"spot-fundamentals/power-management/#spot-charger-components","title":"Spot charger components","text":"<p>Charging case: Central to all charging configurations.</p> <p>Power cable: Connects charging case to wall power (AC) for all charging configurations.</p> <p>Shore power cable: Connects charger to Spot's shore power port for charging a battery in Spot or operating computers via shore power.</p> <p>Battery charging tray: Place battery into tray to while the charger is plugged in and powered on to begin charging.</p>"},{"location":"spot-fundamentals/power-management/#spot-charger-specifications","title":"Spot charger specifications","text":"<p>Operating temperature: 0\u00b0C to 45\u00b0C</p> <p>Input specifications: 100-240 VAC, frequency 50/60Hz, current 8A Max</p> <p>Charge time: Approximately 1 hour (temperature and battery dependent) output: 35-58.6 VDC, 12 A max</p>"},{"location":"spot-fundamentals/power-management/#spot-enterprise-and-explorer-batteries","title":"Spot Enterprise and Explorer batteries","text":"<p>Spot Enterprise and Explorer batteries are the same except for two main differences:</p> <ul> <li> <p>The Enterprise Battery is 1kg heavier than the Explorer Battery.</p> </li> <li> <p>The Enterprise Battery has a row of fins to help cool the battery during charging, whereas the Explorer Battery has a smooth, yellow cap.</p> </li> </ul> Enterprise battery Explorer battery"},{"location":"spot-fundamentals/power-management/#determining-the-battery-charge-level","title":"Determining the battery charge level","text":"<p>The SoC (State of Charge) button on the battery illuminates LEDs to show the battery level when pressed.</p> <p>The robot controller also shows the battery level. Tap the battery icon in the info bar at the top of the tablet screen. When the robot runs out of sufficient battery power, the motors will power off and Spot will sit.</p> Note <p>The ROLL OVER option will only be available if the robot's motors are actively powered on.</p>"},{"location":"spot-fundamentals/power-management/#charging-the-battery","title":"Charging the battery","text":"<p>Spot charger battery tray</p> <p>With the Spot Charger plugged in and powered on, align the connector between the battery and the charging tray and place the battery into the tray to begin charging.</p> <p>It is easier to keep the battery cool when using the direct method to recharge. While the battery can discharge at much higher temperatures, it will only charge when under 45\u00b0C.</p> <p>Shore power</p> <p>Use the shore power cable to connect the charger to the robot and charge a battery while installed in a Spot robot. With the charger plugged in and powered on, insert the charging cable into the charging port at the back of Spot while being careful to orient the plug correctly using the white dot on the connector and socket.</p> <ul> <li> <p>For Explorer models, the white dot on the connector should be facing the belly of the robot. </p> </li> <li> <p>For Enterprise models, the white dot on the connector should be facing the top of the robot.</p> </li> </ul> <p>Do not attempt to force the connector. Misaligning the connector can damage it.</p> <p>The Spot Charger will always default to charging a battery in the charging tray over the battery in the robot using shore power. If a battery is placed in the charging tray during shore power charging, the Spot Charger will default to charging the battery in the tray after 1 minute.</p> <p>The battery will begin charging regardless of whether Spot\u2019s computers are powered on or off.</p>"},{"location":"spot-fundamentals/power-management/#hot-swapping-the-battery","title":"Hot swapping the battery","text":"<p>When on shore power you can safely hot swap a battery (change batteries without powering down the robot). To perform a hot swap:</p> <ol> <li> <p>Flip Spot onto its back with motor lock-out engaged.</p> </li> <li> <p>Connect the shore power cable to the robot.</p> </li> <li> <p>Replace the battery inside the robot with a fully charged battery.</p> </li> <li> <p>Remove the shore power cable.</p> </li> </ol> <p>This is a method to use Spot for periods that extend beyond the capacity of a single battery charge. </p>"},{"location":"spot-fundamentals/spot-fundamentals/","title":"Spot Fundamentals","text":"Objective <p>Effectively and safely utilize Spot by gaining a comprehensive understanding of its parts, features, power management, startup procedures, and storage, while also recognizing its basic operation philosophy and limitations. Prioritize safety and security in all aspects of Spot's usage.</p>"},{"location":"spot-fundamentals/spot-fundamentals/#prerequisites","title":"Prerequisites","text":"<p>Possession of a fully functional Spot, complete with its compatible batteries, charger, and the optional Payload Arm.</p>"},{"location":"spot-fundamentals/spot-fundamentals/#introduction","title":"Introduction","text":"<p>Imagine your classroom as a company's warehouse, brimming with goods that require safety checks every evening. Instead of manual inspections, you've brought in Spot, a cutting-edge robot designed to streamline and improve these safety reviews.</p> <p>To effectively utilize Spot, a foundational understanding is essential. In \"Spot Fundamentals\", we dive into the basics: its structure, the movement of its joints, and its energy source. Beyond just mechanics, this section provides a holistic view of Spot, setting the groundwork for its full range of capabilities.</p> <p>Even as an autonomous robot, Spot benefits from human oversight. Properly managing its startup and shutdown processes is crucial for its optimal performance and durability. Safety is paramount, both for Spot and those around it. Additionally, for those keen on exploring further, we touch upon the advanced features, like the Spot Arm payload.</p> <p>Progressing through this curriculum, each segment moves us closer to our main objective: preparing Spot for its nightly safety missions in your classroom's simulated 'warehouse'. By the end, Spot won\u2019t just be hardware; it will represent the intersection of education, technology, and practical application.</p>"},{"location":"spot-fundamentals/startup-shutdown/","title":"Startup/Shutdown","text":"Procedure <p>Follow these step-by-step instructions to power on your robot. For any issues that arise with powering on, inspection, or otherwise, contact support@bostondynamics.com.</p>"},{"location":"spot-fundamentals/startup-shutdown/#1-perform-a-pre-startup-inspection","title":"1. Perform a pre-startup inspection","text":"<p>Before starting Spot up, perform a visual inspection of the robot. In best practice, this should include:</p> <ul> <li> <p>Inspection of Spot crash protection, ensuring it is secured and without cracks or other damage. </p> </li> <li> <p>Inspection of camera modules.</p> </li> <li> <p>Inspection of the battery and the battery compartment, ensuring it is free of cracks, debris or other foreign objects. Now is a good time to record the user account password located in the battery compartment.</p> </li> </ul>"},{"location":"spot-fundamentals/startup-shutdown/#2-power-spot-on","title":"2. Power Spot on","text":"<p>Before powering on the robot, make sure that:</p> <ul> <li> <p>The Spot battery is sufficiently charged</p> </li> <li> <p>Spot is unplugged from power and Ethernet</p> </li> <li> <p>The power plug cover and Ethernet cover are properly inserted and not hanging loose</p> </li> <li> <p>Bystanders and observers are at least 2m away from the robot </p> </li> </ul> <p>To power Spot on:</p> <ol> <li> <p>Roll the robot onto its back and insert the battery.</p> </li> <li> <p>Ensure the battery is properly seated and secure in the battery compartment.</p> </li> <li> <p>Press and hold the Power button for two seconds. You will hear the fans turn on and spin loudly for approximately two minutes. During this time, Spot's computers are booting and its hosted WiFi network is initiating. </p> </li> <li> <p>When the lights on the front of the robot are flashing rainbow and the noise of the fans is audibly lower, follow the steps below to connect the controller. </p> </li> </ol> Warning <p>Spot may not appear to power on at all depending on the state of the battery. If the charge level is only at one or two bars (less than 40% charged) or is too warm from charging or heavy use, the robot may not turn on. Always power on the robot using a sufficiently charged, cool battery.</p>"},{"location":"spot-fundamentals/startup-shutdown/#3-connect-the-controller","title":"3. Connect the controller","text":"Note <p>Spot has built-in WiFi. It can host its own WiFi network as an Access Point, or join an existing network. Default usernames and passwords for Spot\u2019s WiFi are stored in the battery compartment. Payloads can expand Spot\u2019s connection options.</p> <p>For the purposes of this getting started tutorial, the instructions below will guide you through connecting the controller via Spot's built-in WiFi network. </p> <p>To connect the controller to the robot:</p> <ol> <li> <p>Confirm that the robot is powered on. </p> </li> <li> <p>Power on the controller.</p> </li> <li> <p>Open the Spot App which is pre-loaded onto the controller. </p> </li> <li> <p>Select the appropriate network as directed by your system administrator. For most initial configurations, this is Spot\u2019s built-in access point.</p> </li> <li> <p>Select your robot from the list of available WiFi networks or add your robot to the network using \u201cAdd Robot.\u201d</p> </li> <li> <p>Enter a valid user name and password. When first starting up the robot, use the default user credentials you recorded as part of the pre-startup inspection process in this instruction.</p> </li> <li> <p>Select \u201cObserve\u201d or \u201cPower On\u201d on the controller then follow the next steps to enable Motor Power.</p> </li> </ol>"},{"location":"spot-fundamentals/startup-shutdown/#4-enable-motor-power","title":"4. Enable motor power","text":"<p>When you are ready to operate the robot, the motor lockout must be disengaged to enable motor power. As a reminder, absolute safest handling status indicators are highlighted in green below.</p> <ol> <li> <p>Notify any bystanders that motors will be active. Spot could now move unexpectedly and people should maintain a 2 meter (minimum) safety distance from the robot. </p> </li> <li> <p>Unlock the motors by pressing the motor lockout button. The button will slowly flash red. This indicates that the motors are unlocked and can be powered on via the tablet. </p> </li> <li> <p>Turn motor power on via the tablet by clicking on the power icon, then slide the motor toggle to on. </p> </li> <li> <p>The button will flash faster until motors are powered, at which point the button will display as solid red. </p> </li> </ol>"},{"location":"spot-fundamentals/storage-safety/","title":"Storage & Safety","text":"<p>Space and storage requirements</p> <p>Once Spot arrives on site, there are a few spatial considerations you will want to be prepared for.</p>"},{"location":"spot-fundamentals/storage-safety/#storage-and-safety","title":"Storage and safety","text":"<p>Your entire Spot system will arrive in three separate shipments: </p> <ul> <li> <p>The Spot case containing Spot and the controller tablet (Case Specs: 25\" x 21\" x 39\"; 125 lbs with the robot and tablet). You'll want to think about where you will store Spot and all of the system components. Spot is best stored in the case or at a Spot Dock when not in use, so you will want a safe and secure area designated for this purpose.</p> <ul> <li>If you ordered the Enterprise version of Spot, the Spot Dock will arrive in its own case along with the robot. About the Spot Dock Self-Charging Station will be useful knowledge to refer back to as you progress towards Spot operation. </li> </ul> </li> <li> <p>Battery and charging system containing the charger, all applicable charging cords and two Lithium Ion Spot batteries. We recommend that you develop a battery safety and storage policy that is aligned with your local and state regulations regarding batteries of this type.</p> <ul> <li>Because Spot batteries are Lithium Ion (access the Spot Battery Safety Data Sheet (SDS) here) we recommend developing battery safety, charging and storage policies that align with the local and state regulations regarding batteries of this type. If your business has a Safety Officer, this may be a good place to start. </li> </ul> </li> <li> <p>Calibration panel used for calibration of the Spot cameras. This panel should be stored in the same location as the robot to facilitate the re-calibration process in the field. </p> </li> </ul> Note <p>You may want to consider assigning a designated area for battery charging and overnight storage. Here, you could clearly post your policies around battery charging, safety and storage for the benefit of your team and those working within your facility.</p>"},{"location":"spot-fundamentals/storage-safety/#space-requirements-for-spot-operation","title":"Space requirements for Spot operation","text":"<p>When Spot's power is on, you want to ensure you have sufficient space to operate the robot while maintaining our recommended safety distance of at least 2 meters (6 ft) between the operator or any bystanders, and the robot.  </p> <p>If you are first operating Spot indoors such as in a school classroom, it is always best to push tables and chairs out of the way and secure any loose cords or wires that could hinder the robot's movement.</p> <p>Once you build confidence with the basic operation of the robot, you may want to test its performance on stairs and more difficult terrain. Before you operate Spot, think about spaces at your site that may be engaging, such as a staircase or outdoor area where you could eventually take the robot for a walk and test out its mobility.  </p>"},{"location":"spot-fundamentals/storage-safety/#pinch-points","title":"Pinch points","text":"<p>Spot\u2019s joints can pinch fingers and other body parts and entangle loose clothing, long hair, and jewelry.</p> Warning <p>Added payloads to Spot means an increase in the amount of possible pinch points on the robot. Always exercise caution and identify potential new pinch points on the robot when mounting payloads. </p>"},{"location":"spot-fundamentals/storage-safety/#safe-handling-conditions","title":"Safe handling conditions","text":"<p>Spot should only be handled when the power is OFF, or if the robot power is ON with motor lockout engaged. You can verify the power status of the robot by referencing the power and motor lockout buttons at the rear of the robot. The power conditions outlined in green are considered safe for handling. More information to follow in this series.</p>"},{"location":"spot-fundamentals/storage-safety/#spot-handles","title":"Spot handles","text":"<p>Spot has a handle at each hip joint. Use these to lift, carry, and roll the robot. When using the handles, always make a fist with each hand. Whenever possible, use the handles to manipulate Spot. </p> Warning <p>With payloads (especially Spot Arm) mounted onto the robot, extra caution must be exercised, even when properly grasping the handles.</p> Note <p>Refer to Unboxing Spot for information on safely lifting and rolling Spot.</p>"},{"location":"spot-fundamentals/unboxing-spot/","title":"Unboxing Spot","text":"Objective <p>Safely unpack Spot.</p> Warning <p>The initial unboxing and handling of Spot should be carried out by adults. Over time, students can be trained and certified to take on these tasks, but under the constant supervision of adults.</p>"},{"location":"spot-fundamentals/unboxing-spot/#safely-unboxing-and-lifting-spot","title":"Safely unboxing and lifting Spot","text":"<p>Spot is heavy (32.7 kg or 72.1 lbs with a battery) and can be awkward to carry, particularly with attached payloads. Always grab the handles or legs with clenched fists and maintain safe lifting precautions.</p> <p>Before removing Spot or any of its elements, from the case, make sure you have prepared an unencumbered space sufficient to handle its contests. It is recommended that a soft tiled area is used to place Spot.</p> <p>Always use two people to lift Spot, one at the front and one at the rear, as pictured below. Your case configuration may differ slightly as depicted below. </p>"},{"location":"spot-fundamentals/unboxing-spot/#safe-rolling","title":"Safe rolling","text":"<p>Rolling Spot from its belly to its back (or vice versa) can be done with only one person. The handles should always be used to avoid pinch points.</p> <p>When lifting with the handles, always grab the handles with clenched fists and maintain safe lifting precautions.</p>"}]}